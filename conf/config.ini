[SHARE]

# variable options: wrf original 2d, wrf-python provided 2d, and h500, h200 
var=slp, U10, V10, h500
#var=slp, U10, V10, h500

# ntasks for IO, 8 would be enough to occupy full bandwidth 
ntasks=8

[TRAINING]
# training date range
training_start=20110101
training_end=20201231

# 2-D clustering node numbers
# for example, 8 types could be assigned as 1x8 or 2x4
# let the smaller number be the row idx n_nodex
# if n_nodex=1, the topological structure would be 1-D
n_nodex=1
n_nodey=8

# Spread of the neighbourhood function, needs to be adequate to the dimensions of the map.
sigma=0.1
# initial learning rate
learning_rate=0.1
# neighbourhood function
nb_func= mexican_hat 

iterations=10000

# preprocessing options: 
# temporal_norm (single or multiple variables)
# original (single variable)
preprocess_method=temporal_norm

# use grid search to get optimal hyper-parameters
grid_search_opt=True


[INFERENCE]
# debug mode for small sample tests 
debug_mode=False

[GRID_SEARCH]

# how many processors for grid search
gs_nworkers=8

# format: 0.1, 0.3, 1
gs_sigma= 0.1, 0.3, 0.5
gs_learning_rate=0.05, 0.1, 0.3, 0.5

# set n_nodex=1 automatically
gs_1dnodey=8,9,10,11,12

#gs_nb_func=gaussian, mexican_hat, bubble, triangle
gs_nb_func=gaussian

# resampling interval 
gs_respl_int=1,2,3,4

[OUTPUT]
output_root = ./output/

[OTHER]
src_wrf=/home/dataop/data/nmodel/wrf_fc/
# Set True to link pathwrf output to training input
relink_pathwrf= False 
# Set True to link pathwrf realtime output to inference
relink_realtimewrf= True
